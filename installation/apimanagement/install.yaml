---
- name: Install Utility VM's softwares
  hosts: all
  become: true
  vars:
      - skip: false


  tasks:

  
    # Git & System Setup
    - block:
        - name: Creates directory
          ansible.builtin.file:
            path: /root/mssoftware
            state: directory
        - name: Checking out MS Software Archittecture Repo
          ansible.builtin.git:
            repo: 'https://github.com/MincomGithub/MS-Software-Architecture.git'
            dest: ~/mssoftware
        
      when: not skip|bool
      rescue:
        - name: rescue task that runs on setup fail
          ansible.builtin.debug:
            msg: "Task Rescued"
            
      always:
        - name: This task always runs at the end regardless of outcome
          ansible.builtin.debug:
            msg: "Setup tasks done!" 


    
    # Krakend
    - block:

        - name: Remove container
          community.docker.docker_container:
            name: krakend
            state: absent

        - name: Re-create a Krakend container
          docker_container:
            name: krakend
            image: devopsfaith/krakend
            state: started
            detach: yes
            recreate: yes
            restart: yes
            restart_policy: always
            ports:
              - "8080:8080"
            volumes:
              - krakend:/etc/krakend/

        - name: Allow all access to 8080
          ufw:
            rule: allow
            port: 8080
            
      when: skip|bool
      rescue:
        - name: rescue task that runs if any task fails inside block
          ansible.builtin.debug:
            msg: "Task Rescued padloc"
            
      always:
        - name: This task always runs at the end regardless of outcome
          ansible.builtin.debug:
            msg: "This task will always run at the end - padloc" 


    # Kong
    - block:

        - name: Create a kong network
          docker_network:
            name: kong-net
            
        - name: Remove container
          community.docker.docker_container:
            name: kong-dbless
            state: absent

        - name: Re-create a kong-dbless container
          docker_container:
            name: kong-dbless
            image: kong/kong-gateway:3.7.1.2
            state: started
            detach: yes
            recreate: yes
            restart: yes
            restart_policy: always
            ports:
              - "8080:8080"
              - "8010:8000"
              - "8443:8443"
              - "8001:8001"
              - "8444:8444"
              - "8002:8002"
              - "8445:8445"
              - "8003:8003"
              - "8004:8004"
            volumes:
              - ~/mssoftware/apimanagement/kong/:/kong/declarative/
            env:
              KONG_DATABASE: "off"
              KONG_DECLARATIVE_CONFIG: "/kong/declarative/kong.yml"
              KONG_PROXY_ACCESS_LOG: "/dev/stdout"
              KONG_ADMIN_ACCESS_LOG: "/dev/stdout"
              KONG_PROXY_ERROR_LOG: "/dev/stderr"
              KONG_ADMIN_ERROR_LOG: "/dev/stderr"
              KONG_ADMIN_LISTEN: "0.0.0.0:8001"
              KONG_ADMIN_GUI_URL: "http://192.168.1.103:8080"

        - name: Allow all access to 8080
          ufw:
            rule: allow
            port: 8080
            
      when: not skip|bool
      rescue:
        - name: rescue task that runs if any task fails inside block
          ansible.builtin.debug:
            msg: "Task Rescued padloc"
            
      always:
        - name: This task always runs at the end regardless of outcome
          ansible.builtin.debug:
            msg: "This task will always run at the end - padloc" 





