---
- name: Install Main VM's softwares
  hosts: all
  become: true

  tasks:


    # Git & System Setup
    - block:
        - name: Creates directory
          ansible.builtin.file:
            path: /root/mssoftware
            state: directory
        - name: Checking out MS Software Archittecture Repo
          ansible.builtin.git:
            repo: 'https://github.com/MincomGithub/MS-Software-Architecture.git'
            dest: ~/mssoftware
            update: yes
        
      rescue:
        - name: rescue task that runs on setup fail
          ansible.builtin.debug:
            msg: "Task Rescued"
            
      always:
        - name: This task always runs at the end regardless of outcome
          ansible.builtin.debug:
            msg: "Setup tasks done!" 


    # Netdata
    - block:

        - name: Update all packages to their latest version
          ansible.builtin.apt:
            name: "*"
            state: latest

        - name: Install netdata (state=present is optional)
          ansible.builtin.apt:
            name: netdata
            state: present

        - name: Allow all access to 19999
          ufw:
            rule: allow
            port: 19999

        # Manual Edit IP to server's IP
        # 1. sudo vim /etc/netdata/netdata.conf    192.168.1.132
        # 2. systemctl restart netdata
        # 3. systemctl status netdata

      rescue:
        - name: rescue task that runs if any task fails inside block
          ansible.builtin.debug:
            msg: "Task Rescued netdata"
            
      always:
        - name: This task always runs at the end regardless of outcome
          ansible.builtin.debug:
            msg: "This task will always run at the end - netdata" 


            # Netdata
    
    
    # Grafana & Prometheus
    - block:

        - name: Docker command to pull down grafanaprometheus
          ansible.builtin.command:
            chdir: ~/mssoftware/monitoringmetrics/grafanaprometheus
            cmd: docker compose down

        - name: Docker command to bring up grafanaprometheus
          ansible.builtin.command:
            chdir: ~/mssoftware/monitoringmetrics/grafanaprometheus
            cmd: docker compose up -d

        - name: Allow all access to 3000
          ufw:
            rule: allow
            port: 3000
        
        - name: Allow all access to 9090
          ufw:
            rule: allow
            port: 9090

            
            
      when: not skip|bool  
      # Credentials
      # admin/admin
      rescue:
        - name: rescue task that runs if any task fails inside block
          ansible.builtin.debug:
            msg: "Task Rescued netdata"
            
      always:
        - name: This task always runs at the end regardless of outcome
          ansible.builtin.debug:
            msg: "This task will always run at the end - netdata" 



    
    # Protainer
    - block:

        - name: Remove portainer's container
          community.docker.docker_container:
            name: portainer
            state: absent

        - name: Remove a portainer_data volume
          community.docker.docker_volume:
            name: portainer_data
            state: absent
        
        - name: Create a portainer_data volume
          community.docker.docker_volume:
            name: portainer_data

        - name: Re-create a uptime kuma container
          docker_container:
            name: portainer
            image: louislam/uptime-kuma:1
            state: started
            detach: yes
            recreate: yes
            restart: yes
            restart_policy: always
            ports:
              - "8000:8000"
              - "9443:9443"
            volumes:
              - /var/run/docker.sock:/var/run/docker.sock
              - portainer_data:/data portainer/portainer-ce:latest

        - name: Allow all access to 9443
          ufw:
            rule: allow
            port: 9443
            
      when: not skip|bool
      rescue:
        - name: rescue task that runs if any task fails inside block
          ansible.builtin.debug:
            msg: "Task Rescued padloc"
            
      always:
        - name: This task always runs at the end regardless of outcome
          ansible.builtin.debug:
            msg: "This task will always run at the end - padloc" 
